{
	"info": {
		"_postman_id": "747a70cd-37e2-45bf-9532-1a599f9f7d1b",
		"name": "Restful-Booker CRUD Automation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "35962824"
	},
	"item": [
		{
			"name": "Happy Path",
			"item": [
				{
					"name": "Create - Add New Reservation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type is JSON or text\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.match(/json|text/);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"bookingId\", jsonData.bookingid);\r",
									"pm.environment.set(\"firstname\", jsonData.booking.firstname);\r",
									"pm.environment.set(\"lastname\", jsonData.booking.lastname);\r",
									"pm.environment.set(\"totalprice\", jsonData.booking.totalprice);\r",
									"pm.environment.set(\"depositpaid\", jsonData.booking.depositpaid);\r",
									"pm.environment.set(\"additionalneeds\", jsonData.booking.additionalneeds);\r",
									"pm.environment.set(\"checkin\", jsonData.booking.bookingdates.checkin);\r",
									"pm.environment.set(\"checkout\", jsonData.booking.bookingdates.checkout);\r",
									"\r",
									"\r",
									"pm.test(\"Check if the created booking matches the request data\", function () {\r",
									"pm.expect(jsonData.booking.firstname).to.equal(pm.environment.get(\"firstname\"));\r",
									"pm.expect(jsonData.booking.lastname).to.equal(pm.environment.get(\"lastname\"));\r",
									"pm.expect(jsonData.booking.totalprice).to.equal(pm.environment.get(\"totalprice\"));\r",
									"pm.expect(jsonData.booking.depositpaid).to.equal(pm.environment.get(\"depositpaid\"));\r",
									"pm.expect(jsonData.booking.additionalneeds).to.equal(pm.environment.get(\"additionalneeds\"));\r",
									"pm.expect(jsonData.booking.bookingdates).to.be.an(\"object\");\r",
									"pm.expect(jsonData.booking.bookingdates.checkin).to.equal(pm.environment.get(\"checkin\"));\r",
									"pm.expect(jsonData.booking.bookingdates.checkout).to.equal(pm.environment.get(\"checkout\"));\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstname\": \"sally\",\r\n  \"lastname\": \"brown\",\r\n  \"totalprice\": 1580,\r\n  \"depositpaid\": true,\r\n  \"bookingdates\": {\r\n    \"checkin\": \"2023-01-01\",\r\n    \"checkout\": \"2024-01-05\"\r\n  },\r\n  \"additionalneeds\": \"Breakfast\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/booking",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type is JSON or text\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.match(/json|text/);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"const expectedFirstname = pm.environment.get(\"firstname\");\r",
									"const expectedLastname = pm.environment.get(\"lastname\");\r",
									"const expectedCheckin = pm.environment.get(\"checkin\");\r",
									"const expectedCheckout = pm.environment.get(\"checkout\"); \r",
									"\r",
									"//Zorunlu Alan kontrolleri\r",
									"pm.test(\"Response contains all expected properties\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"firstname\");\r",
									"    pm.expect(jsonData).to.have.property(\"lastname\");\r",
									"    pm.expect(jsonData).to.have.property(\"totalprice\");\r",
									"    pm.expect(jsonData).to.have.property(\"depositpaid\");\r",
									"    pm.expect(jsonData).to.have.property(\"additionalneeds\");\r",
									"    pm.expect(jsonData).to.have.property(\"bookingdates\");\r",
									"});\r",
									"\r",
									"pm.test(\"Data type checks\", function () {\r",
									"    pm.expect(jsonData.totalprice).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.depositpaid).to.be.a(\"boolean\");\r",
									"    pm.expect(jsonData.additionalneeds).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"//Türkçe Karakter\r",
									"pm.test(\"Lastname contains only letters\", function () {\r",
									"    pm.expect(jsonData.lastname).to.match(/^[a-zA-ZçÇöÖşŞıİğĞüÜ\\s]+$/);\r",
									"    pm.expect(jsonData.firstname).to.match(/^[a-zA-ZçÇöÖşŞıİğĞüÜ\\s]+$/);\r",
									"});\r",
									"\r",
									"pm.test(\"Check firstname\", function () {\r",
									"    pm.expect(jsonData.firstname).to.eql(expectedFirstname);\r",
									"});\r",
									"\r",
									"pm.test(\"Check lastname\", function () {\r",
									"    pm.expect(jsonData.lastname).to.eql(expectedLastname);\r",
									"});\r",
									"\r",
									"pm.test(\"Total price is positive\", function () {\r",
									"    pm.expect(jsonData.totalprice).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Check bookingdates object structure\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"bookingdates\");\r",
									"    pm.expect(jsonData.bookingdates).to.have.property(\"checkin\");\r",
									"    pm.expect(jsonData.bookingdates).to.have.property(\"checkout\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate checkin and checkout dates\", function () {\r",
									"    pm.expect(jsonData.bookingdates.checkin).to.eql(expectedCheckin);\r",
									"    pm.expect(jsonData.bookingdates.checkout).to.eql(expectedCheckout);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/booking/{{bookingId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking",
								"{{bookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateBooking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type is JSON or text\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.match(/json|text/);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"firstname\", jsonData.firstname);\r",
									"pm.environment.set(\"lastname\", jsonData.lastname);\r",
									"pm.environment.set(\"totalprice\", jsonData.totalprice);\r",
									"pm.environment.set(\"depositpaid\", jsonData.depositpaid);\r",
									"pm.environment.set(\"additionalneeds\", jsonData.additionalneeds);\r",
									"pm.environment.set(\"checkin\", jsonData.bookingdates.checkin);\r",
									"pm.environment.set(\"checkout\", jsonData.bookingdates.checkout);\r",
									"\r",
									"pm.test(\"Check if the created booking matches the request data\", function () {\r",
									"pm.expect(jsonData.firstname).to.equal(pm.environment.get(\"firstname\"));\r",
									"pm.expect(jsonData.lastname).to.equal(pm.environment.get(\"lastname\"));\r",
									"pm.expect(jsonData.totalprice).to.equal(pm.environment.get(\"totalprice\"));\r",
									"pm.expect(jsonData.depositpaid).to.equal(pm.environment.get(\"depositpaid\"));\r",
									"pm.expect(jsonData.additionalneeds).to.equal(pm.environment.get(\"additionalneeds\"));\r",
									"pm.expect(jsonData.bookingdates).to.be.an(\"object\");\r",
									"pm.expect(jsonData.bookingdates.checkin).to.equal(pm.environment.get(\"checkin\"));\r",
									"pm.expect(jsonData.bookingdates.checkout).to.equal(pm.environment.get(\"checkout\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "token={{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"aa\",\r\n    \"lastname\" : \"aa\",\r\n    \"totalprice\" : 777,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2029-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/booking/{{bookingId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking",
								"{{bookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ID After Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type is JSON or text\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.match(/json|text/);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"const expectedFirstname = pm.environment.get(\"firstname\");\r",
									"const expectedLastname = pm.environment.get(\"lastname\");\r",
									"const expectedCheckin = pm.environment.get(\"checkin\");\r",
									"const expectedCheckout = pm.environment.get(\"checkout\"); \r",
									"\r",
									"//Zorunlu Alan kontrolleri\r",
									"pm.test(\"Response contains all expected properties\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"firstname\");\r",
									"    pm.expect(jsonData).to.have.property(\"lastname\");\r",
									"    pm.expect(jsonData).to.have.property(\"totalprice\");\r",
									"    pm.expect(jsonData).to.have.property(\"depositpaid\");\r",
									"    pm.expect(jsonData).to.have.property(\"additionalneeds\");\r",
									"    pm.expect(jsonData).to.have.property(\"bookingdates\");\r",
									"});\r",
									"\r",
									"pm.test(\"Data type checks\", function () {\r",
									"    pm.expect(jsonData.totalprice).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.depositpaid).to.be.a(\"boolean\");\r",
									"    pm.expect(jsonData.additionalneeds).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"//Türkçe Karakter\r",
									"pm.test(\"Lastname contains only letters\", function () {\r",
									"    pm.expect(jsonData.lastname).to.match(/^[a-zA-ZçÇöÖşŞıİğĞüÜ\\s]+$/);\r",
									"    pm.expect(jsonData.firstname).to.match(/^[a-zA-ZçÇöÖşŞıİğĞüÜ\\s]+$/);\r",
									"});\r",
									"\r",
									"pm.test(\"Check firstname\", function () {\r",
									"    pm.expect(jsonData.firstname).to.eql(expectedFirstname);\r",
									"});\r",
									"\r",
									"pm.test(\"Check lastname\", function () {\r",
									"    pm.expect(jsonData.lastname).to.eql(expectedLastname);\r",
									"});\r",
									"\r",
									"pm.test(\"Total price is positive\", function () {\r",
									"    pm.expect(jsonData.totalprice).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Check bookingdates object structure\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"bookingdates\");\r",
									"    pm.expect(jsonData.bookingdates).to.have.property(\"checkin\");\r",
									"    pm.expect(jsonData.bookingdates).to.have.property(\"checkout\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate checkin and checkout dates\", function () {\r",
									"    pm.expect(jsonData.bookingdates.checkin).to.eql(expectedCheckin);\r",
									"    pm.expect(jsonData.bookingdates.checkout).to.eql(expectedCheckout);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/booking/{{bookingId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking",
								"{{bookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type is JSON or text\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.match(/json|text/);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Cookie",
								"value": "token={{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/booking/{{bookingId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking",
								"{{bookingId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Negative",
			"item": [
				{
					"name": "Unauthorized Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type is JSON or text\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.match(/json|text/);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.text();\r",
									"\r",
									"pm.test(\"Check if the updated booking matches the request data\", function () {\r",
									"    pm.expect(jsonData).to.equal(\"Forbidden\");\r",
									"});\r",
									"\r",
									"\r",
									"//401 Unauthorized ama burada 403 de olabilr gibi\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "token={{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"Selim\",\r\n    \"lastname\" : \"Yüce\",\r\n    \"totalprice\" : 777,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2029-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/booking/{{bookingId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking",
								"{{bookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response has a valid token\", function () {\r",
									"    \r",
									"    pm.expect(jsonData).to.have.property(\"token\");\r",
									"    pm.expect(jsonData.token).to.not.be.empty;\r",
									"    pm.expect(jsonData.token).to.be.a(\"string\");\r",
									"\r",
									"    pm.environment.set(\"token\", jsonData.token);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"{{username}}\",\r\n  \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create - Missing firstname - Bug?",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 400 (Bad Request)\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"lastname\": \"Jones\",\r\n  \"totalprice\": 1580,\r\n  \"depositpaid\": true,\r\n  \"bookingdates\": {\r\n    \"checkin\": \"2023-01-01\",\r\n    \"checkout\": \"2024-01-05\"\r\n  },\r\n  \"additionalneeds\": \"Breakfast\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/booking",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create - Wrong Data Type/totalpice - Bug?",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 400 (Bad Request)\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Yanlış veri tipi olduğu için bad request beklerdim."
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstname\": \"Berat\",\r\n  \"lastname\": \"Jones\",\r\n  \"totalprice\": \"asd\",\r\n  \"depositpaid\": true,\r\n  \"bookingdates\": {\r\n    \"checkin\": \"2023-01-01\",\r\n    \"checkout\": \"2024-01-05\"\r\n  },\r\n  \"additionalneeds\": \"Breakfast\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/booking",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create - Boundary / Huge Fields (Bug)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should reject overly long firstname\", function () {\r",
									"  pm.expect(pm.response.code, \"Expected 400 for overly long firstname\").to.equal(400);\r",
									"});\r",
									"\r",
									"// Yanlış veri tipi olduğu için bad request beklerdim.\r",
									"\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Check if firstname is truncated in response\", function() {\r",
									"  pm.expect(responseData.booking.firstname.length).to.be.below(51); \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstname\": \"BerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerassssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstsssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssst\",\r\n  \"lastname\": \"BerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssstBerasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssst\",\r\n  \"totalprice\": \"asd\",\r\n  \"depositpaid\": true,\r\n  \"bookingdates\": {\r\n    \"checkin\": \"2023-01-01\",\r\n    \"checkout\": \"2024-01-05\"\r\n  },\r\n  \"additionalneeds\": \"Breakfast\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/booking",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create - Invalid Date - Bug?",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 400 (Bad Request) or 500 (Internal Server Error)\", function () {\r",
									"    pm.expect([400, 500]).to.include(pm.response.code);\r",
									"});\r",
									"\r",
									"\r",
									"//Checkin Checkout NaN olmamalı."
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstname\": \"Berat\",\r\n  \"lastname\": \"Jones\",\r\n  \"totalprice\": 1580,\r\n  \"depositpaid\": true,\r\n  \"bookingdates\": {\r\n    \"checkin\": \"2023-12-44\",\r\n    \"checkout\": \"2023-15-05\"\r\n  },\r\n  \"additionalneeds\": \"Breakfast\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/booking",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create - Checkin after checkout  - Bug",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Checkin after checkout should fail\", function () {\r",
									"    pm.expect([400, 422, 500]).to.include(pm.response.code);\r",
									"\r",
									"    try {\r",
									"        const jsonData = pm.response.json();\r",
									"        pm.expect(jsonData).to.have.property(\"error\");\r",
									"        pm.expect(jsonData.error.toLowerCase()).to.include(\"checkin\");\r",
									"    } catch (e) {\r",
									"        let responseText = pm.response.text();\r",
									"        pm.expect(responseText.toLowerCase()).to.include(\"error\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstname\": \"Berat\",\r\n  \"lastname\": \"J\",\r\n  \"totalprice\": \"asd\",\r\n  \"depositpaid\": \"23\",\r\n  \"bookingdates\": {\r\n    \"checkin\": \"2021-01-01\",\r\n    \"checkout\": \"2022-01-05\"\r\n  },\r\n  \"additionalneeds\": \"Breakfast\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/booking",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete - Booking does not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Re-deleting a non-existent resource should return 404, 410, or 204\", function () {\r",
									"    const actualStatus = pm.response.code;\r",
									"    const expectedStatuses = [404, 410, 204];\r",
									"\r",
									"    if (expectedStatuses.includes(actualStatus)) {\r",
									"        pm.expect(expectedStatuses).to.include(actualStatus);\r",
									"    } else {\r",
									"        console.log(\"Got status:\", actualStatus, \"but expected one of:\", expectedStatuses);\r",
									"        pm.expect.fail(`Expected one of ${expectedStatuses}, but got ${actualStatus}`);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Cookie",
								"value": "token={{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/booking/{{bookingId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking",
								"{{bookingId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "All Requests",
			"item": [
				{
					"name": "All IDs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Validate the structure of the response array\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item).to.be.an('object');",
									"        pm.expect(item.bookingid).to.exist.and.to.be.a('number');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Bookingid is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  responseData.forEach(function(booking) {",
									"    pm.expect(booking.bookingid).to.be.a('number').and.to.be.at.least(0);",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Verify that the response contains at least one booking ID\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    responseData.forEach(function(booking) {",
									"        pm.expect(booking.bookingid).to.exist;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/booking",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter by checkin/checkout date",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response is an array with at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"});",
									"",
									"",
									"pm.test(\"Each element in the array has the required field 'bookingid'\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(booking) {",
									"        pm.expect(booking.bookingid).to.exist;",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Bookingid is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(booking) {",
									"        pm.expect(booking.bookingid).to.be.a('number').and.to.be.at.least(0);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/booking?checkin=2018-01-01&checkout=2024-01-05",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "checkin",
									"value": "2018-01-01"
								},
								{
									"key": "checkout",
									"value": "2024-01-05"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter by name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response contains an array with at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"});",
									"",
									"",
									"pm.test(\"Each element in the array has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(element) {",
									"        pm.expect(element).to.have.property('bookingid');",
									"    });",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/booking?firstname={{firstname}}&lastname={{lastname}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "firstname",
									"value": "{{firstname}}"
								},
								{
									"key": "lastname",
									"value": "{{lastname}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Ping - HealthCheck",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/ping",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authentication",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"token\", jsonData.token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"{{username}}\",\r\n  \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create - Add New Reservation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"bookingId\", jsonData.bookingid);\r",
									"pm.environment.set(\"firstname\", jsonData.booking.firstname);\r",
									"pm.environment.set(\"lastname\", jsonData.booking.lastname);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstname\": \"Ali\",\r\n  \"lastname\": \"Veli\",\r\n  \"totalprice\": 250,\r\n  \"depositpaid\": true,\r\n  \"bookingdates\": {\r\n    \"checkin\": \"2024-01-01\",\r\n    \"checkout\": \"2024-01-05\"\r\n  },\r\n  \"additionalneeds\": \"Breakfast\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/booking",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateBooking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "token={{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"Selim\",\r\n    \"lastname\" : \"Yüce\",\r\n    \"totalprice\" : 777,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2029-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/booking/{{bookingId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking",
								"{{bookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Partial Update",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "token={{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"Burak\",\r\n    \"lastname\" : \"Tahmaz\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/booking/4041",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking",
								"4041"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Cookie",
								"value": "token={{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/booking/{{bookingId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking",
								"{{bookingId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": ""
		}
	]
}